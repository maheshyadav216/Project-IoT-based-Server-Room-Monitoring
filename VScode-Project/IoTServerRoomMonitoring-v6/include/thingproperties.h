// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <arduino_secrets.h>
#include "EmonLib.h" 
#include "visuals.h"
#include "pitches.h"
#include "SNU.h"

const char SSID[]     = SECRET_SSID;    // Network SSID (name)
const char PASS[]     = SECRET_PASS;    // Network password (use for WPA, or use as key for WEP)


void onAutomaticModeChange();
void onCoolerControlChange();
void onHeaterControlChange();

void readSensors();
void displayInitMsg();
void displaySensorData();
void defaultPage();
void showTemperature();
void showHumidity();
void showPressure();
void showVoltage();

void CheckForGesture();
void displayReadings();

void thermostatControl();


String server_room_data;
float ac_mains_voltage;
float barometric_pressure;
float humidity;
float temperature;
bool automatic_mode;
bool cooler_control;
bool fire_alert_status;
bool heater_control;
bool power_failure_status;
bool smoke_alert_status;


void initProperties(){

  ArduinoCloud.addProperty(server_room_data, READ, 60 * SECONDS, NULL);
  ArduinoCloud.addProperty(ac_mains_voltage, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(barometric_pressure, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(humidity, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(temperature, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(automatic_mode, READWRITE, ON_CHANGE, onAutomaticModeChange);
  ArduinoCloud.addProperty(cooler_control, READWRITE, ON_CHANGE, onCoolerControlChange);
  ArduinoCloud.addProperty(fire_alert_status, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(heater_control, READWRITE, ON_CHANGE, onHeaterControlChange);
  ArduinoCloud.addProperty(power_failure_status, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(smoke_alert_status, READ, ON_CHANGE, NULL);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
